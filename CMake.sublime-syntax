%YAML 1.2
---
name: CMake
file_extensions: [CMakeLists.txt, cmake]
scope: source.cmake

variables:

  # https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#escape-sequences
  escape_semicolon: \\;
  escape_encoded: \\t|\\r|\\n
  escape_identity: \\\(|\\\)|\\\#|\\\"|\\ |\\\\|\\\$|\\@|\\\^
  escape_sequence: '{{escape_identity}}|{{escape_encoded}}|{{escape_semicolon}}'

  # https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#source-files
  space: "[ \t]+"
  newline: "\n"
  line_ending: '{{line_comment}}?{{newline}}'

  # https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#line-comment
  line_comment: \#.*

  # https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#bracket-argument
  bracket_open: \[=*\[
  bracket_close: \]=*\]
  bracket_content: '[^{{bracket_open}}{{bracket_close}}]*'
  bracket_argument: '{{bracket_open}}{{bracket_content}}{{bracket_close}}'

  # https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#quoted-argument
  quoted_continuation: \\{{newline}}
  quoted_element: '[^\\"]|{{escape_sequence}}|quoted_continuation'
  quoted_argument: '"{{quoted_element}}*"'

  # https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#unquoted-argument
  # Note: we're not doing legacy
  unquoted_element: "[^ \t()#\"\\']"
  unquoted_argument: "{{unquoted_element}}+"

  argument: '{{bracket_argument}}|{{quoted_argument}}|{{unquoted_argument}}'
  separation: '{{space}}|{{line_ending}}'
  separated_arguments: '{{separation}}+{{argument}}?|{{separation}}*\({{arguments}}\)'

  boundary: (?=[^\w-<>])
  spaces: '[ \t]*'
  identifier: \b[A-Za-z_][A-Za-z0-9_]*\b
  IDENTIFIER: \b@?[A-Z_][A-Z0-9_]*(?=[^\w-<>])
  variable_start: \$(?:ENV)?\{
  variable_end: \}

contexts:
  main:
    - include: comments
    - include: control-flow
    - include: function-calls
    - include: variable-invalid

  control-flow:
    - include: control-flow-if-elif-else-endif
    - include: control-flow-foreach

  control-flow-if-elif-else-endif:
    - match: (?=if|elif|else|endif{{spaces}}\()
      push: control-flow-if-elif-else-endif-impl

  control-flow-if-elif-else-endif-impl:
    - meta_scope: meta.function-call.cmake
    - match: \)
      scope: punctuation.section.arguments.end.cmake
      pop: true
    - match: (?={{identifier}}{{spaces}}\()
      push:
        - match: (?={{spaces}}\()
          pop: true
        - match: (?={{identifier}})
          push:
            - match: '{{identifier}}'
              scope: keyword.control.cmake
              pop: true
    - match: \(
      scope: punctuation.section.arguments.begin.cmake
      push: control-flow-if-elif-else-endif-arguments

  control-flow-if-elif-else-endif-arguments:
    - meta_content_scope: meta.function-call.arguments.cmake
      scope: variable.parameter.cmake
    - match: |-
        (?x)\b(STREQUAL|AND|NOT|VERSION_LESS|POLICY|DEFINED|OR|EXISTS|EQUAL|
        COMMAND|MATCHES|TARGET|IS_NEWER_THAN|IS_DIRECTORY|IS_SYMLINK|
        IS_ABSOLUTE|LESS|GREATER|EQUAL|STRLESS|STRGREATER|VERSION_EQUAL|
        VERSION_GREATER)\b
      scope: variable.parameter.cmake
    - match: (?=\))
      pop: true
    - match: '"'
      push: quoted-argument
    - match: (?=\w|\$)
      push: unquoted-argument
    - match: (?={{variable_start}})
      push: variable
    - include: comments

  control-flow-foreach:
    - match: (?=(?:end)?foreach{{spaces}}\()
      push: control-flow-foreach-impl

  control-flow-foreach-impl:
    - meta_scope: meta.function-call.cmake
    - match: \)
      scope: punctuation.section.arguments.end.cmake
      pop: true
    - match: (?={{identifier}}{{spaces}}\()
      push:
        - match: (?={{spaces}}\()
          pop: true
        - match: (?={{identifier}})
          push:
            - match: '{{identifier}}'
              scope: keyword.control.cmake
              pop: true
    - match: \(
      scope: punctuation.section.arguments.begin.cmake
      push: control-flow-foreach-arguments

  control-flow-foreach-arguments:
    - meta_content_scope: meta.function-call.arguments.cmake
    - match: (?x)\b(IN|LISTS|ITEMS|RANGE)
      scope: variable.parameter.cmake
    - match: (?=\))
      pop: true
    - match: '"'
      push: quoted-argument
    - match: (?=\w|\$)
      push: unquoted-argument
    - match: (?={{variable_start}})
      push: variable
    - include: comments

  function-calls:
    - include: generic-function-call

  generic-function-call-impl:
    - meta_scope: meta.function-call.cmake
    - match: \)
      scope: punctuation.section.arguments.end.cmake
      pop: true
    - match: (?={{identifier}}{{spaces}}\()
      push:
        - match: (?={{spaces}}\()
          pop: true
        - match: (?={{identifier}})
          push:
            - match: '{{identifier}}'
              scope: variable.function.cmake
              pop: true
    - match: \(
      scope: punctuation.section.arguments.begin.cmake
      push: generic-function-arguments

  generic-function-call:
    - match: (?={{identifier}}{{spaces}}\()
      push: generic-function-call-impl

  generic-function-arguments:
    - meta_content_scope: meta.function-call.arguments.cmake
    - match: (?=\))
      pop: true
    - match: \(
      push: invalid
    - match: '"'
      push: quoted-argument
    - match: (?={{IDENTIFIER}})
      push: unquoted-argument-or-keyword
    - match: (?={{unquoted_argument}})
      push: unquoted-argument
    - include: comments

  # https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#unquoted-argument
  unquoted-argument-or-keyword:
    - meta_scope: variable.parameter.cmake
    - match: (?=\t| |\(|\)|\#|\"|\\)
      pop: true
    - include: variable 

  quoted-argument:
    - meta_scope: string.quoted.double.cmake
    # https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#escape-sequences
    - match: \\[()#" \\$@^trn;]
      scope: constant.character.escape.cmake
    - match: \\.
      scope: invalid.illegal.character.escape.cmake
    - match: '"'
      pop: true
    - match: ;
      scope: punctuation.separator.cmake
    - include: variable
    - include: generator-expression

  # https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#unquoted-argument
  unquoted-argument:
    - meta_scope: string.unquoted.cmake
    - match: \\[()#"\\]
      scope: constant.character.escape.cmake
    - match: \\.
      scope: invalid.illegal.character.escape.cmake
    - match: (?=\t| |\(|\)|\#|\"|\\)
      pop: true
    - include: variable
    - include: generator-expression

  line-continuation:
    - match: (\\)(.*)$\n?
      captures:
        1: punctuation.separator.continuation.line.cmake
        2: invalid.illegal.unexpected-text.cmake
    # make sure to resume parsing at next line
      push:
        # This prevents strings after a continuation from being a docstring
        - match: '(?=\S)'
          pop: true

  line-continuation-or-pop:
    - include: line-continuation
    - match: $|(?=;|#)
      pop: true

  variable:
    - match: '{{variable_start}}'
      scope: keyword.other.block.start.cmake
      push:
        - meta_scope: meta.text-substitution.cmake
        - match: '{{variable_end}}'
          scope: keyword.other.block.end.cmake
          pop: true
        - match: '{{identifier}}'
          scope: variable.cmake
        - include: variable

  generator-expression:
    - match: \$<
      scope: keyword.other.block.start.cmake
      push:
        - meta_content_scope: meta.text-substitution.cmake
        - match: '>'
          scope: keyword.other.block.end.cmake
          pop: true
        - match: ':'
          scope: punctuation.definition.generator-expression.separator.cmake
        - include: generator-expression
        - include: variable

  invalid:
    - meta_scope: invalid.illegal.scope.cmake
    - match: (?=\))
      pop: true

  variable-invalid:
    - match: '{{variable_start}}'
      scope: invalid.illegal.variable.cmake
      push:
        - meta_content_scope: invalid.illegal.variable.parameter.cmake
        - match: '{{variable_end}}'
          scope: invalid.illegal.variable.cmake
          pop: true
        - include: variable-invalid

  comments:
    - match: "#"
      scope: punctuation.definition.comment.cmake
      push:
        - meta_scope: comment.line.number-sign.cmake
        - match: \n
          pop: true
