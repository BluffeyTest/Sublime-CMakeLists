%YAML 1.2
---
name: CMake
file_extensions: [CMakeLists.txt, cmake]
scope: source.cmake

variables:
  spaces: '[ \t]*'
  identifier: \b[A-Za-z_][A-Za-z0-9_]*\b
  IDENTIFIER: \b@?[A-Z_][A-Z0-9_]*\b
  variable_start: \$\{
  variable_end: \}

contexts:
  main:
    - include: comments
    - include: control-flow
    - include: function-calls
    - include: variable-invalid

  control-flow:
    - include: control-flow-if-elif-else-endif
    - include: control-flow-foreach

  control-flow-if-elif-else-endif:
    - match: (?=if|elif|else|endif{{spaces}}\()
      push: control-flow-if-elif-else-endif-impl

  control-flow-if-elif-else-endif-impl:
    - meta_scope: meta.function-call.cmake
    - match: \)
      scope: punctuation.section.arguments.end.cmake
      pop: true
    - match: (?={{identifier}}{{spaces}}\()
      push:
        - match: (?={{spaces}}\()
          pop: true
        - match: (?={{identifier}})
          push:
            - match: '{{identifier}}'
              scope: keyword.control.cmake
              pop: true
    - match: \(
      scope: punctuation.section.arguments.begin.cmake
      push: control-flow-if-elif-else-endif-arguments

  control-flow-if-elif-else-endif-arguments:
    - meta_content_scope: meta.function-call.arguments.cmake
      scope: variable.parameter.cmake
    - match: \bSTREQUAL\b|\bAND\b|\bNOT\b|\bVERSION_LESS\b|\bPOLICY\b|\bDEFINED\b|\bOR\b|\bEXISTS\b|\bEQUAL\b|\bCOMMAND\b|\bMATCHES\b
      scope: variable.parameter.cmake
    - match: (?=\))
      pop: true
    - match: '"'
      push: quoted-argument
    - match: (?=\w|\$)
      push: unquoted-argument
    - match: (?={{variable_start}})
      push: variable
    - include: comments

  control-flow-foreach:
    - match: (?=(?:end)?foreach{{spaces}}\()
      push: control-flow-foreach-impl

  control-flow-foreach-impl:
    - meta_scope: meta.function-call.cmake
    - match: \)
      scope: punctuation.section.arguments.end.cmake
      pop: true
    - match: (?={{identifier}}{{spaces}}\()
      push:
        - match: (?={{spaces}}\()
          pop: true
        - match: (?={{identifier}})
          push:
            - match: '{{identifier}}'
              scope: keyword.control.cmake
              pop: true
    - match: \(
      scope: punctuation.section.arguments.begin.cmake
      push: control-flow-foreach-arguments

  control-flow-foreach-arguments:
    - meta_content_scope: meta.function-call.arguments.cmake
    - match: \bIN\b|\bLISTS\b|\bITEMS\b|\bRANGE\b
      scope: variable.parameter.cmake
    - match: (?=\))
      pop: true
    - match: '"'
      push: quoted-argument
    - match: (?=\w|\$)
      push: unquoted-argument
    - match: (?={{variable_start}})
      push: variable
    - include: comments

  function-calls:
    - include: message-function-call
    - include: generic-function-call

  message-function-call:
    - match: (?=message{{spaces}}\()
      push: message-function-call-impl

  message-function-call-impl:
    - meta_scope: meta.function-call.cmake
    - match: \)
      scope: punctuation.section.arguments.end.cmake
      pop: true
    - match: (?=message{{spaces}}\()
      push:
        - match: (?={{spaces}}\()
          pop: true
        - match: (?=message)
          push:
            - match: 'message'
              scope: variable.function.cmake
              pop: true
    - match: \(
      scope: punctuation.section.arguments.begin.cmake
      push: message-function-arguments

  message-function-arguments:
    - meta_content_scope: meta.function-call.arguments.cmake
    - match: (?=\))
      pop: true
    - match: \bSTATUS\b|\bWARNING\b|\bAUTHOR_WARNING\b|\bSEND_ERROR\b|\bFATAL_ERROR\b|\bDEPRECATION\b
      scope: variable.parameter.cmake
    - match: '"'
      push: quoted-argument
    - match: (?=\w|\$)
      push: unquoted-argument
    - match: (?={{variable_start}})
      push: variable
    - include: comments

  generic-function-call-impl:
    - meta_scope: meta.function-call.cmake
    - match: \)
      scope: punctuation.section.arguments.end.cmake
      pop: true
    - match: (?={{identifier}}{{spaces}}\()
      push:
        - match: (?={{spaces}}\()
          pop: true
        - match: (?={{identifier}})
          push:
            - match: '{{identifier}}'
              scope: variable.function.cmake
              pop: true
    - match: \(
      scope: punctuation.section.arguments.begin.cmake
      push: generic-function-arguments

  generic-function-call:
    - match: (?={{identifier}}{{spaces}}\()
      push: generic-function-call-impl

  generic-function-arguments:
    - meta_content_scope: meta.function-call.arguments.cmake
    - match: (?=\))
      pop: true
    - match: '"'
      push: quoted-argument
    - match: (?={{IDENTIFIER}})
      push: unquoted-argument-or-keyword
    - match: (?=\w|\$)
      push: unquoted-argument
    - match: (?={{variable_start}})
      push: variable
    - include: comments

  unquoted-argument-or-keyword:
    - meta_scope: variable.parameter.cmake
    - match: (?=\t| |\(|\)|\#|\"|\\)
      pop: true
    - include: variable 

  quoted-argument:
    - meta_scope: string.quoted.double.cmake
    - match: \\.
      scope: constant.character.escape.cmake
    - match: '"'
      pop: true
    - match: ;
      scope: punctuation.separator.cmake
    - include: variable

  unquoted-argument:
    # It seems color themes color the unquoted string as greenish, which makes
    # things harder to read actually.
    - meta_scope: meta.string.unquoted.cmake
    - match: (?=\t| |\(|\)|\#|\"|\\)
      pop: true
    - include: variable

  line-continuation:
    - match: (\\)(.*)$\n?
      captures:
        1: punctuation.separator.continuation.line.cmake
        2: invalid.illegal.unexpected-text.cmake
    # make sure to resume parsing at next line
      push:
        # This prevents strings after a continuation from being a docstring
        - match: '(?=\S)'
          pop: true

  line-continuation-or-pop:
    - include: line-continuation
    - match: $|(?=;|#)
      pop: true

  variable:
    - match: '{{variable_start}}'
      scope: punctuation.definition.variable.cmake
      push:
        - meta_content_scope: variable.other.bracket.cmake
        - match: '{{variable_end}}'
          scope: punctuation.definition.variable.cmake
          pop: true
        - include: variable

  variable-invalid:
    - match: '{{variable_start}}'
      scope: invalid.illegal.variable.cmake
      push:
        - meta_content_scope: invalid.illegal.variable.parameter.cmake
        - match: '{{variable_end}}'
          scope: invalid.illegal.variable.cmake
          pop: true
        - include: variable-invalid

  comments:
    - match: "#"
      scope: punctuation.definition.comment.cmake
      push:
        - meta_scope: comment.line.number-sign.cmake
        - match: \n
          pop: true
