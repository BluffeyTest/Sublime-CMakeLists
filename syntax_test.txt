# SYNTAX TEST "Packages/Sublime-CMakeLists/CMake.sublime-syntax"

# This is a comment
# ^^^^^^^^^^^^^^^^^^ comment.line
#      ^^^^^^^^^^^^^ comment.line

# <- source.cmake


        # a comment on a non-zero column
#         ^ comment.line

if (NOT (${something} AND ${something_else}))
#  ^ punctuation.section.arguments.begin.cmake
#       ^ punctuation.section.arguments.begin.cmake
#                                          ^ punctuation.section.arguments.end.cmake
#                                           ^ punctuation.section.arguments.end.cmake

endif()

set(x "\! \@ \# \$ \% \& \* \( \) \a \b \c \d \e \f \g \h \i \j \k \l \m \n \o \p \q \r \s \t \u \v \w \x \y \z")
#      ^^ invalid.illegal.character.escape.cmake
#         ^^ constant.character.escape.cmake
#            ^^ constant.character.escape.cmake
#               ^^ constant.character.escape.cmake
#                  ^^ invalid.illegal.character.escape.cmake
#                        ^^ invalid.illegal.character.escape.cmake
#                           ^^ constant.character.escape.cmake
#                              ^^ constant.character.escape.cmake
#                                 ^^ invalid.illegal.character.escape.cmake
#                                    ^^ invalid.illegal.character.escape.cmake
#                                       ^^ invalid.illegal.character.escape.cmake
#                                          ^^ invalid.illegal.character.escape.cmake
#                                             ^^ invalid.illegal.character.escape.cmake
#                                                ^^ invalid.illegal.character.escape.cmake
#                                                                        ^^ constant.character.escape.cmake

cmake_minimum_required(VERSION 3.0)
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#                     ^ punctuation.section.arguments.begin.cmake
#                                 ^ punctuation.section.arguments.end.cmake
#                      ^^^^^^^^^^^ meta.function-call.arguments.cmake
#         ^ variable.function.cmake

set(some_var "Hello, world!")
# ^ variable.function.cmake
#   ^ string.unquoted.cmake
#            ^ string.quoted.double.cmake
#  ^ punctuation.section.arguments.begin.cmake
#                           ^ punctuation.section.arguments.end.cmake

set(var_with_quotes "This is a string with \"embedded\" quotes.")

set(another ${some_var})
#                      ^ punctuation.section.arguments.end.cmake

set(blarg
    # A comment inbetween
#     ^ comment.line
    foobar)

message(STATUS "The some_var variable has the value \"${some_var}\"")
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments.cmake
#       ^^^^^^ variable.parameter.cmake 
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.double.cmake
#                                                   ^^ constant.character.escape.cmake
#                                                     ^^ keyword.other.block.start.cmake
#                                                       ^^^^^^^^ meta.text-substitution.cmake
#                                                               ^ keyword.other.block.end.cmake
#                                                                ^^ constant.character.escape.cmake

target_link_libraries(mytarget PUBLIC
        ${Boost_LIBRARIES}
        ThisSpansMultipleLines
        ButNoProblem
        )

set(asdf nested_vars_test some${var_inside_${anot${h}er_var}_and_moving_on}_even_further)
#  ^ punctuation.section.arguments.begin.cmake
#                             ^^ keyword.other.block.start.cmake
#                                          ^^ keyword.other.block.start.cmake
#                                                          ^ keyword.other.block.end.cmake
#                                                                         ^ keyword.other.block.end.cmake

set(some_list "one;two;thre\;e")
#                 ^ punctuation.separator.cmake
#                     ^ punctuation.separator.cmake
#                          ^^ constant.character.escape.cmake

if("${somevar}" STREQUAL "something else")
#^ keyword.control.cmake

elif("${somevar}" STREQUAL whatever AND NOT ${another_var} VERSION_LESS 1.2.3)
#^^^ keyword.control.cmake

elif  (STREQUALasdf sTREQUAL COMMAND ANDNOT AND NOT VERSION_GREATER TARGET)
#^^^ keyword.control.cmake
#      ^^^^^^^^^^^^ string.unquoted.cmake 
#                   ^^^^^^^^ string.unquoted.cmake 
#                            ^^^^^^^ variable.parameter.cmake
#                                    ^^^^^^ variable.parameter.cmake
#                                           ^^^ variable.parameter.cmake
#                                               ^^^ variable.parameter.cmake

endif   ()
#^^^^ keyword.control.cmake

target_include_directories(mytarget PUBLIC $sdf>)

foreach(item ${items})
    message(STATUS "The item is ${item}")
    message(WARNING "asdf")
    message(AUTHOR_WARNING "hello there")
    message(FATAL_ERROR "i have the high ground")
    message(DEPRECATION "it's treason then")
endforeach()

if (NOT "${the_var}" MATCHES "[A-Za-z]\\d+")
# maybe add regex as an embedded syntax here

if ($ENV{LD_LIBRARY_PATH} STREQUAL /usr/local/lib)
#   ^^^^^ keyword.other.block.start.cmake
#                                  ^^^^^^^^^^^^^^ string.unquoted.cmake
endif()

include(AddFileDependencies)
include(CMakeParseArguments)

  install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/LLVMConfig.cmake
    ${llvm_cmake_builddir}/LLVMConfigVersion.cmake
    LLVM-Config.cmake
#   ^ string.unquoted.cmake
    DESTINATION ${LLVM_INSTALL_PACKAGE_DIR}
#   ^ variable.parameter.cmake
    COMPONENT cmake-exports)
#   ^ variable.parameter.cmake
#             ^ string.unquoted.cmake

function(llvm_replace_compiler_option var old new)
  # Replaces a compiler option or switch `old' in `var' by `new'.
  # If `old' is not in `var', appends `new' to `var'.
  # Example: llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE "-O3" "-O2")
  # If the option already is on the variable, don't add it:
  if( "${${var}}" MATCHES "(^| )${new}($| )" )
    set(n "")
  else()
    set(n "${new}")
  endif()
  if( "${${var}}" MATCHES "(^| )${old}($| )" )
    string( REGEX REPLACE "(^| )${old}($| )" " ${n} " ${var} "${${var}}" )
  else()
    set( ${var} "${${var}} ${n}" )
  endif()
  set( ${var} "${${var}}" PARENT_SCOPE )
endfunction(llvm_replace_compiler_option)

# Generate LLVMConfig.cmake for the install tree.
set(LLVM_CONFIG_CODE "
# Compute the installation prefix from this LLVMConfig.cmake file location.
get_filename_component(LLVM_INSTALL_PREFIX \"\${CMAKE_CURRENT_LIST_FILE}\" PATH)")
# Construct the proper number of get_filename_component(... PATH)
# calls to compute the installation prefix.
string(REGEX REPLACE "/" ";" _count "${LLVM_INSTALL_PACKAGE_DIR}")
foreach(p ${_count})
  set(LLVM_CONFIG_CODE "${LLVM_CONFIG_CODE}
get_filename_component(LLVM_INSTALL_PREFIX \"\${LLVM_INSTALL_PREFIX}\" PATH)")
endforeach(p)
set(LLVM_CONFIG_INCLUDE_DIRS "\${LLVM_INSTALL_PREFIX}/include")
set(LLVM_CONFIG_LIBRARY_DIRS "\${LLVM_INSTALL_PREFIX}/lib\${LLVM_LIBDIR_SUFFIX}")
set(LLVM_CONFIG_CMAKE_DIR "\${LLVM_INSTALL_PREFIX}/${LLVM_INSTALL_PACKAGE_DIR}")
set(LLVM_CONFIG_BINARY_DIR "\${LLVM_INSTALL_PREFIX}")
set(LLVM_CONFIG_TOOLS_BINARY_DIR "\${LLVM_INSTALL_PREFIX}/bin")
set(LLVM_CONFIG_EXPORTS_FILE "\${LLVM_CMAKE_DIR}/LLVMExports.cmake")
set(LLVM_CONFIG_EXPORTS "${LLVM_EXPORTS}")
configure_file(
  LLVMConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/LLVMConfig.cmake
  @ONLY)

target_include_directories(module PUBLIC $<CMAKE_COMPILER_ID>)
# ^^^^^^^^^^^^^^^^^^^^^^^^ variable.function.cmake
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#                         ^ punctuation.section.arguments.begin.cmake
#                          ^^^^^^ string.unquoted.cmake
#                                 ^^^^^^ variable.parameter.cmake
#                                        ^^ keyword.other.block.start.cmake
#                                          ^^^^^^^^^^^^^^^^^ meta.text-substitution.cmake
#                                                           ^ keyword.other.block.end.cmake
#                                                            ^ punctuation.section.arguments.end.cmake

set(TGT_PATH $<TARGET_FILE:tgt1>)

if(NOT (CMAKE_VERSION VERSION_LESS 3.0))  # CMake >= 3.0
  # Build an interface library target:
  add_library(module INTERFACE)
  target_include_directories(module INTERFACE $<BUILD_INTERFACE:${PYBIND11_INCLUDE_DIR}>
#                                               ^^^^^^^^^^^^^^^ variable.cmake
#                                                              ^ punctuation.definition.generator-expression.separator.cmake
#                                                               ^^ keyword.other.block.start.cmake
#                                                                 ^^^^^^^^^^^^^^^^^^^^ variable.cmake
#                                                                                     ^^ keyword.other.block.end.cmake
                                              $<BUILD_INTERFACE:${PYTHON_INCLUDE_DIRS}>
                                              $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
  if(WIN32 OR CYGWIN)
    target_link_libraries(module INTERFACE $<BUILD_INTERFACE:${PYTHON_LIBRARIES}>)
  elseif(APPLE)
    target_link_libraries(module INTERFACE "-undefined dynamic_lookup")
  endif()
  target_compile_options(module INTERFACE $<BUILD_INTERFACE:${PYBIND11_CPP_STANDARD}>)

  add_library(pybind11::module #[[new style bracket comments!]] ALIAS module)  # to match exported target
endif()

#[=[

  the following [[ snippet of text ]] should do nothing

    special

              in                                 [==[ not even this one ]==]

                        particular

]=] # and this is where a regular line comment starts 
# ^ comment.block.cmake
#   ^ comment.line

add_custom_target(ClaraDeploy
    COMMAND
        ${CMAKE_COMMAND} 
            -D VERSION=${PROJECT_VERSION} 
#              ^^^^^^^^ string.unquoted.cmake
            -D SUBLIME_PLATFORM_EXT=${SUBLIME_PLATFORM_EXT} 
#              ^^^^^^^^^^^^^^^^^^^^^ string.unquoted.cmake
            -D ZIPFILE="${Clara_tar_output}" 
#              ^^^^^^^^string.unquoted.cmake
            -P "${CMAKE_CURRENT_SOURCE_DIR}/Deploy.cmake"
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.double.cmake
    DEPENDS
        ClaraPackage
    COMMENT
        "Deploying Clara"
    )

set(bedtime_story [=[
[1] Non eram ${nescius}, \Brute, \cum, \q\u\a\e \s\u\m\m\i\s\ \i\n\g\e\n\i\i\s
exquisitaque doctrina "${philosophi}" Graeco sermone tractavissent, ea Latinis
litteris mandaremus, fore ut hic noster labor in varias reprehensiones
incurreret. [[ x ]] nam quibusdam, et iis quidem non admodum indoctis, totum hoc
displicet philosophari. quidam autem non tam id reprehendunt, si remissius
agatur, sed tantum studium tamque multam operam ponendam in eo non arbitrantur.
erunt etiam, et ii quidem eruditi Graecis litteris, contemnentes Latinas, qui se
dicant in Graecis legendis operam malle consumere. postremo aliquos futuros
suspicor, qui me ad alias litteras vocent, genus hoc scribendi, etsi sit
elegans, personae tamen et dignitatis esse negent. [2] Contra quos omnis
dicendum breviter existimo. Quamquam philosophiae quidem vituperatoribus satis
responsum est eo libro, quo a nobis philosophia defensa et collaudata est, cum
esset accusata et vituperata ab Hortensio. qui liber cum et tibi probatus
videretur et iis, quos ego posse iudicare arbitrarer, plura suscepi veritus ne
movere hominum studia viderer, retinere non posse. Qui autem, si maxime hoc
placeat, moderatius tamen id volunt fieri, difficilem quandam temperantiam
postulant in eo, quod semel admissum coerceri reprimique non potest, ut
propemodum iustioribus utamur illis, qui omnino avocent a philosophia, quam his,
qui rebus infinitis modum constituant in reque eo meliore, quo maior sit,
mediocritatem desiderent. [3] Sive enim ad sapientiam perveniri potest, non
paranda nobis solum ea, sed fruenda etiam [sapientia] est; sive hoc difficile
est, tamen nec modus est ullus investigandi veri, nisi inveneris, et quaerendi
defatigatio turpis est, cum id, quod quaeritur, sit pulcherrimum. etenim si
delectamur, cum scribimus, quis est tam invidus, qui ab eo nos abducat? sin
laboramus, quis est, qui alienae modum statuat industriae? nam ut Terentianus
Chremes non inhumanus, qui novum vicinum non vult 'fodere aut arare aut aliquid
ferre denique' -- non enim illum ab industria, sed ab inliberali labore deterret
--, sic isti curiosi, quos offendit noster minime nobis iniucundus labor. ]=])
