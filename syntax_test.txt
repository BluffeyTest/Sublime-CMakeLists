# SYNTAX TEST "Packages/Sublime-CMakeLists/CMake.sublime-syntax"

# This is a comment
# ^^^^^^^^^^^^^^^^^^ comment.line.number-sign.cmake
#      ^^^^^^^^^^^^^ comment.line.number-sign.cmake

# <- source.cmake


        # a comment on a non-zero column
#         ^ comment.line.number-sign.cmake

${asdf}
# ^ invalid.illegal

cmake_minimum_required(VERSION 3.0)
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call.cmake
#                     ^ punctuation.section.arguments.begin.cmake
#                                 ^ punctuation.section.arguments.end.cmake
#                      ^^^^^^^^^^^ meta.function-call.arguments.cmake
#         ^ variable.function.cmake

set(some_var "Hello, world!")
# ^ variable.function.cmake
#   ^ meta.string.unquoted.cmake
#            ^ string.quoted.double.cmake
#  ^ punctuation.section.arguments.begin.cmake
#                           ^ punctuation.section.arguments.end.cmake

set(var_with_quotes "This is a string with \"embedded\" quotes.")

set(another ${some_var})
#                      ^ punctuation.section.arguments.end.cmake

set(blarg
    # A comment inbetween
#     ^ comment.line.number-sign.cmake
    foobar)

message(STATUS "The some_var variable has the value \"${some_var}\"")
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments.cmake
#       ^^^^^^ variable.parameter.cmake 
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.double.cmake
#                                                   ^^ constant.character.escape.cmake
#                                                     ^^ punctuation.definition.variable.cmake
#                                                       ^^^^^^^^ variable.other.bracket.cmake
#                                                               ^ punctuation.definition.variable.cmake
#                                                                ^^ constant.character.escape.cmake

target_link_libraries(mytarget PUBLIC
        ${Boost_LIBRARIES}
        ThisSpansMultipleLines
        ButNoProblem
        )

set(nested_vars_test some${var_inside_${another_var}_and_moving_on}_even_further)
#  ^ punctuation.section.arguments.begin.cmake
#                        ^^ punctuation.definition.variable.cmake
#                                     ^^ punctuation.definition.variable.cmake
#                                                  ^ punctuation.definition.variable.cmake
#                                                                 ^ punctuation.definition.variable.cmake

set(some_list "one;two;thre\;e")
#                 ^ punctuation.separator.cmake
#                     ^ punctuation.separator.cmake
#                          ^^ constant.character.escape.cmake

if("${somevar}" STREQUAL "something else")
#^ keyword.control.cmake

elif("${somevar}" STREQUAL whatever AND NOT ${another_var} VERSION_LESS 1.2.3)
#^^^ keyword.control.cmake

elif  (STREQUALasdf STREQUAL COMMAND ANDNOT AND NOT)
#^^^ keyword.control.cmake
#      ^^^^^^^^^^^^ meta.string.unquoted.cmake 
#                   ^^^^^^^^ variable.parameter.cmake
#                            ^^^^^^^ variable.parameter.cmake
#                                    ^^^^^^ meta.string.unquoted.cmake 
#                                           ^^^ variable.parameter.cmake
#                                               ^^^ variable.parameter.cmake

endif   ()
#^^^^ keyword.control.cmake

foreach(item ${items})
    message(STATUS "The item is ${item}")
    message(WARNING "asdf")
    message(AUTHOR_WARNING "hello there")
    message(FATAL_ERROR "i have the high ground")
    message(DEPRECATION "it's treason then")
endforeach()

if (NOT "${the_var}" MATCHES "[A-Za-z]\\d+")
# maybe add regex as an embedded syntax here

if ($ENV{LD_LIBRARY_PATH} STREQUAL /usr/local/lib)
#   ^^^^^ punctuation.definition.variable.cmake
endif()

include(AddFileDependencies)
include(CMakeParseArguments)

  install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/LLVMConfig.cmake
    ${llvm_cmake_builddir}/LLVMConfigVersion.cmake
    LLVM-Config.cmake
#   ^ meta.string.unquoted.cmake -- this fails at the moment!
    DESTINATION ${LLVM_INSTALL_PACKAGE_DIR}
#   ^ variable.parameter.cmake
    COMPONENT cmake-exports)
#   ^ variable.parameter.cmake
#             ^ meta.string.unquoted.cmake

function(llvm_replace_compiler_option var old new)
  # Replaces a compiler option or switch `old' in `var' by `new'.
  # If `old' is not in `var', appends `new' to `var'.
  # Example: llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE "-O3" "-O2")
  # If the option already is on the variable, don't add it:
  if( "${${var}}" MATCHES "(^| )${new}($| )" )
    set(n "")
  else()
    set(n "${new}")
  endif()
  if( "${${var}}" MATCHES "(^| )${old}($| )" )
    string( REGEX REPLACE "(^| )${old}($| )" " ${n} " ${var} "${${var}}" )
  else()
    set( ${var} "${${var}} ${n}" )
  endif()
  set( ${var} "${${var}}" PARENT_SCOPE )
endfunction(llvm_replace_compiler_option)

# Generate LLVMConfig.cmake for the install tree.
set(LLVM_CONFIG_CODE "
# Compute the installation prefix from this LLVMConfig.cmake file location.
get_filename_component(LLVM_INSTALL_PREFIX \"\${CMAKE_CURRENT_LIST_FILE}\" PATH)")
# Construct the proper number of get_filename_component(... PATH)
# calls to compute the installation prefix.
string(REGEX REPLACE "/" ";" _count "${LLVM_INSTALL_PACKAGE_DIR}")
foreach(p ${_count})
  set(LLVM_CONFIG_CODE "${LLVM_CONFIG_CODE}
get_filename_component(LLVM_INSTALL_PREFIX \"\${LLVM_INSTALL_PREFIX}\" PATH)")
endforeach(p)
set(LLVM_CONFIG_INCLUDE_DIRS "\${LLVM_INSTALL_PREFIX}/include")
set(LLVM_CONFIG_LIBRARY_DIRS "\${LLVM_INSTALL_PREFIX}/lib\${LLVM_LIBDIR_SUFFIX}")
set(LLVM_CONFIG_CMAKE_DIR "\${LLVM_INSTALL_PREFIX}/${LLVM_INSTALL_PACKAGE_DIR}")
set(LLVM_CONFIG_BINARY_DIR "\${LLVM_INSTALL_PREFIX}")
set(LLVM_CONFIG_TOOLS_BINARY_DIR "\${LLVM_INSTALL_PREFIX}/bin")
set(LLVM_CONFIG_EXPORTS_FILE "\${LLVM_CMAKE_DIR}/LLVMExports.cmake")
set(LLVM_CONFIG_EXPORTS "${LLVM_EXPORTS}")
configure_file(
  LLVMConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/LLVMConfig.cmake
  @ONLY)
